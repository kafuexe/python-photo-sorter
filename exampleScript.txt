gui :
source button to choose source and window to show path
destination button to choose destination and window to show path
destination folder options : YYYYMMDD
file types : jpeg jpg mpeg mpg avi
add file types
copy or move button

save all options to init file upon exit and load upon start


# ==============================================================================================
#
# UPDATED: Some Dude
# DATE: 28 April 2013
# COMMENT: Script can now also sort various movie file formats based
on date taken
#
# Microsoft PowerShell Source File -- Created with SAPIEN Technologies
PrimalScript 4.1
#
# NAME: OrgPhotos.ps1
#
# UPDATED: Steve Smith
# DATE: 18 January 2009
# COMMENT: Changed file paths and confirmed it works. Note that file
extension must be .psONE not .psELL
#
# AUTHOR: Kim Oppalfens,
# DATE : 12/2/2007
#
# COMMENT: Helps you organise your digital photos into subdirectory,
based on the Exif data
# found inside the picture. Based on the date picture taken property
the pictures will be organized into
# c:\RecentlyUploadedPhotos\YYYYMMDD
# ==============================================================================================
#
# Following block of text moves *.jpg files
#
[reflection.assembly]::loadfile(
"C:\Windows\Microsoft.NET\Framework\v4.0.30319\System.Drawing.dll")

$jpg = Get-ChildItem -recurse -filter *.jpg
    If ($jpg)
        {
            foreach ($file in $jpg)
        {
    $foo=New-Object -TypeName system.drawing.bitmap -ArgumentList $file.fullname

#each character represents an ascii code number 0-10 is date
#10th character is space separator between date and time
#48 = 0 49 = 1 50 = 2 51 = 3 52 = 4 53 = 5 54 = 6 55 = 7 56 = 8 57 = 9 58 = :
#date is in YYYY/MM/DD format
$date = $foo.GetPropertyItem(36867).value[0..9]
$arYear = [Char]$date[0],[Char]$date[1],[Char]$date[2],[Char]$date[3]
$arMonth = [Char]$date[5],[Char]$date[6]
$arDay = [Char]$date[8],[Char]$date[9]
$strYear = [String]::Join("",$arYear)
$strMonth = [String]::Join("",$arMonth)
$strDay = [String]::Join("",$arDay)
$DateTaken = $strYear + $strMonth + $strDay
$TargetPath = "D:\new sort\sorted\" + $DateTaken
$foo.dispose()

If (Test-Path $TargetPath)
    {
        Move-Item $file.FullName -destination $TargetPath -force
    }
Else
    {
        New-Item $TargetPath -Type Directory
        Move-Item $file.FullName -destination $TargetPath -force
    }
}
}
#
# Following block of text moves *.mov files
#
$mov = Get-ChildItem -recurse -filter *.mov
If ($mov)
{
foreach ($file in $mov)
{
$movdir = "D:\new sort\sorted\" + $file.LastWriteTime.ToString('yyyyMMdd')
$foo.dispose()

If (Test-Path $movdir)
{
Move-Item $file.FullName -destination $movdir -force
}
Else
{
New-Item $movdir -Type Directory
Move-Item $file.FullName -destination $movdir -force
}
}
}

#
# Following block of text moves *.wmv files
#
$wmv = Get-ChildItem -recurse -filter *.mp4
If ($wmv)
{
foreach ($file in $wmv)
{
$wmvdir = "D:\new sort\sorted\" + $file.LastWriteTime.ToString('yyyyMMdd')

$foo.dispose()

If (Test-Path $wmvdir)
{
Move-Item $file.FullName -destination $wmvdir -force
}
Else
{
New-Item $wmvdir -Type Directory
Move-Item $file.FullName -destination $wmvdir -force
}
}
}